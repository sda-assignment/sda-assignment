title Admin List Transactions
actor admin
boundary Spring Dispatcher Servlet
control AuthInterceptor
control AdminInterceptor
control AdminTransactionController
entity "Model<Transaction>" as TransactionModel

activate Spring Dispatcher Servlet
admin ->Spring Dispatcher Servlet : Get /admin/transactions
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AuthInterceptor
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor
Spring Dispatcher Servlet ->AdminInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AdminInterceptor
alt returns True
AdminInterceptor -->Spring Dispatcher Servlet : True
deactivate AdminInterceptor
Spring Dispatcher Servlet ->AdminTransactionController : listTransactions()
activate AdminTransactionController
AdminTransactionController ->TransactionModel : select(t -> true)
activate TransactionModel
TransactionModel -->AdminTransactionController : ArrayList<Transaction>
deactivate TransactionModel
AdminTransactionController -->Spring Dispatcher Servlet : ArrayList<Transaction>
deactivate AdminTransactionController
Spring Dispatcher Servlet -->admin : 200 OK
else returns false
activate AdminInterceptor
AdminInterceptor -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.FORBIDDEN)
deactivate AdminInterceptor
Spring Dispatcher Servlet -->admin : 403 FORBIDDEN
end
else returns false
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
Spring Dispatcher Servlet -->admin : 401 UNAUTHORIZED

end
==================================================
title SignUp

actor user
boundary Spring Dispatcher Servlet
control AuthController
entity "Model<User>" as UserModel

activate Spring Dispatcher Servlet
user ->Spring Dispatcher Servlet : POST /signup
Spring Dispatcher Servlet ->AuthController : signUp(SignUpBody body)
activate AuthController
AuthController -> UserModel : recordExists(u -> u.email.equals(body.email))
activate UserModel
alt returns true
UserModel -->AuthController : True
AuthController -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
Spring Dispatcher Servlet --> user:400 BAD_REQUEST
else returns false
UserModel -->AuthController : False
AuthController ->UserModel : insert(new User(body.email, body.username, body.password, false, 0))
deactivate UserModel
deactivate AuthController
Spring Dispatcher Servlet -->user : 200 OK 

end
====================================================
title Refund Request

actor user
boundary Spring Dispatcher Servlet
control AuthInterceptor
control TransactionController
entity "Model<RefundRequest>" as RefundRequestModel
entity "Model<Transaction>" as TransactionModel
activate Spring Dispatcher Servlet
activate AuthInterceptor
user ->Spring Dispatcher Servlet : POST /transactions/{id}/refund
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor
Spring Dispatcher Servlet ->TransactionController : requestRefund(Context ctx, int id)
activate TransactionController
TransactionController ->RefundRequestModel : recordExists(userEmail, transactionId)
activate RefundRequestModel
alt returns true
RefundRequestModel -->TransactionController : True
deactivate RefundRequestModel
TransactionController -->Spring Dispatcher Servlet: throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate TransactionController
Spring Dispatcher Servlet --> user:400 BAD_REQUEST
else returns false
activate TransactionController
activate RefundRequestModel
RefundRequestModel -->TransactionController: False
deactivate RefundRequestModel
TransactionController ->TransactionModel : selectOne(userEmail, id)
activate TransactionModel
TransactionModel --> TransactionController : TargetTransaction (Transaction Object)
deactivate TransactionModel
destroysilent TransactionModel
alt targetTransaction is not found
TransactionController -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate TransactionController
Spring Dispatcher Servlet --> user:400 BAD_REQUEST
else targetTransaction is found
activate TransactionController
alt targetTransaction is of type refund
TransactionController -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate TransactionController
Spring Dispatcher Servlet --> user:400 BAD_REQUEST
else transaction if not of type refund
TransactionController ->RefundRequestModel:refundRequestModel.selectMax(r -> r.id))
activate TransactionController
activate RefundRequestModel
RefundRequestModel-->TransactionController: Integer ID
deactivate RefundRequestModel
TransactionController -> RefundRequestModel : insert(new RefundRequest(Util.incrementOrIntialize(ID),id, RefundRequestStatus.PENDING, ctx.email))
activate RefundRequestModel
deactivate RefundRequestModel
destroysilent RefundRequestModel
deactivate TransactionController
destroysilent TransactionController
Spring Dispatcher Servlet --> user : 200 OK
end
end

end
else returns False
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet : throws new ResponseStatusException (HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
Spring Dispatcher Servlet --> user:401 UNAUTHROIZED
end
=====================================
title Recharge
actor user
boundary Spring Dispatcher Servlet
control AuthInterceptor
control UserController
entity "Model<Transaction>" as TransactionModel
entity "Model<User>" as UserModel
activate Spring Dispatcher Servlet
user ->Spring Dispatcher Servlet : POST /user/recharge
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AuthInterceptor
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor
Spring Dispatcher Servlet ->UserController : rechargeWallet(Context ctx, RechargeWalletBody body)
activate UserController
alt body.cardNumber is negative
UserController -->Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate UserController
Spring Dispatcher Servlet --> user:400 Bad Request
else body.cardNumber is positive
activate UserController
alt body.amount < 0
UserController --> Spring Dispatcher Servlet : throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate UserController
Spring Dispatcher Servlet --> user:400 Bad Request
else body.amount >= 0
activate UserController
UserController ->UserModel : update(u -> new User(u.email, u.username, u.password, u.isAdmin, u.wallet + body.amount), u -> u.email.equals(ctx.email))
activate UserModel
UserModel -->UserController :
deactivate UserModel
UserController ->TransactionModel : insert(new Transaction( Util.incrementOrIntialize (transactionModel.selectMax(t -> t.id)), ctx.email, LocalDateTime.now(), -body.amount, TransactionType.ADD_TO_WALLET, "None", "None"));
activate TransactionModel
TransactionModel -->UserController :
deactivate TransactionModel
UserController -->Spring Dispatcher Servlet :
deactivate UserController

Spring Dispatcher Servlet -->user: 200 OK
end
end
else returns False
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet: throws new ResponseStatusException(HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
Spring Dispatcher Servlet --> user:401 UNAUTHORIZED
end
==============================================
title pay using cash

actor user
boundary Spring Dispatcher Servlet
control AuthInterceptor
control PaymentController
participant PayCashOnDeliveryStrategy
participant handlerFactory
participant concreteHandler
control ServiceController
entity "Model<Provider>" as ProviderModel
entity "Model<Transaction>" as TransactionModel
control DiscountController
entity "Model<Discount>" as DiscountModel
entity "Model<usedDiscount>" as UsedDiscountModel




user->Spring Dispatcher Servlet : POST /services/{serviceName}/providers/{providerName}/pay-cash
activate Spring Dispatcher Servlet
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AuthInterceptor
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor
Spring Dispatcher Servlet ->PaymentController : payCashOnDelivery(Context ctx, String serviceName, String providerName, PaymentBody body)
activate PaymentController

PaymentController ->ServiceController : getServiceProvider(String serviceName, String providerName)
activate ServiceController
ServiceController ->ServiceController : getService(String serviceName)
ServiceController ->ProviderModel:selectOne(p -> p.serviceName.equals(serviceName) && p.name.equals(providerName))
activate ProviderModel
ProviderModel -->ServiceController: return Provider
deactivate ProviderModel
destroysilent ProviderModel
alt provider = null
ServiceController -->PaymentController: throw new ResponseStatusException(HttpStatus.NOT_FOUND)
deactivate ServiceController
PaymentController -->Spring Dispatcher Servlet: return throw new ResponseStatusException(HttpStatus.NOT_FOUND)
deactivate PaymentController
Spring Dispatcher Servlet -->user: 404 NOT_FOUND
else provider != null
activate ServiceController
activate PaymentController
ServiceController -->PaymentController : return Provider
deactivate ServiceController
destroysilent ServiceController
alt !provider.CashOnDelivery
PaymentController-->Spring Dispatcher Servlet: throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate PaymentController
Spring Dispatcher Servlet -->user:400 BAD_REQUEST
end
activate PaymentController
PaymentController-->*PayCashOnDeliveryStrategy:<<create>>
PaymentController ->PaymentController : payToProvider(ctx.email, provider, body.handlerRequest, cashOnDeliveryStrategy)
PaymentController-->*handlerFactory:<<create>>
PaymentController ->handlerFactory:getHandler(provider.handlerName)
activate handlerFactory
handlerFactory ->* concreteHandler:<<create>>
handlerFactory -->PaymentController : return concreteHandler object
deactivate handlerFactory
destroysilent handlerFactory
end
PaymentController -> concreteHandler : validateAndHandleRequest(HashMap<String, String> request)
activate concreteHandler
alt !requestContainsAllKeys(request) : Failure
concreteHandler -->PaymentController: return handlerResponse
PaymentController -->Spring Dispatcher Servlet:throw new ResponseStatusException (HttpStatus.BAD_REQUEST)
deactivate PaymentController
Spring Dispatcher Servlet -->user: 400 BAD_REQUEST
deactivate concreteHandler
else requestContainsAllKeys(request) : Success
activate concreteHandler
activate PaymentController
concreteHandler->concreteHandler:handleRequestAndGetAmount(HashMap <String, String> request)
alt !res.success (failure)
	concreteHandler -->PaymentController: return handlerResponse 
    deactivate concreteHandler
    PaymentController -->Spring Dispatcher Servlet: :throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
    deactivate PaymentController
    Spring Dispatcher Servlet-->user:400 BAD_REQUEST
end
activate PaymentController
activate concreteHandler
	concreteHandler -->PaymentController: return new HandlerResponse(res.amount)
deactivate concreteHandler
destroysilent concreteHandler
PaymentController ->DiscountController:getDiscountsForServiceForUser(email, provider.serviceName)
activate DiscountController
DiscountController ->DiscountModel: select(d -> d.isActive && (d.type == DiscountType.OVERALL || (d.type == DiscountType.SPECIFIC && d.serviceName.equals(serviceName))))
activate DiscountModel
DiscountModel -->DiscountController: return Arraylist<Discount>
destroysilent DiscountModel
deactivate DiscountModel
DiscountController ->DiscountController: getEffectiveDiscountsForUser(String email, ArrayList <Discount> discounts)
DiscountController ->UsedDiscountModel: select(d -> d.email.equals(email))
activate UsedDiscountModel
UsedDiscountModel -->DiscountController : ArrayList<UsedDiscount>
deactivate UsedDiscountModel
DiscountController -->PaymentController: ArrayList<Discount> discounts
deactivate DiscountController
PaymentController ->PayCashOnDeliveryStrategy : pay(amountToDeduct)
activate PayCashOnDeliveryStrategy
PayCashOnDeliveryStrategy -->PaymentController :
deactivate PayCashOnDeliveryStrategy
destroysilent PayCashOnDeliveryStrategy
PaymentController ->TransactionModel:selectMax(t-> t.id)
activate TransactionModel
TransactionModel -->PaymentController: Integer ID

PaymentController ->TransactionModel: insert(new transaction(ID,email, LocalDateTime.now(), amountToDeduct, TransactionType.PAYMENT, provider.serviceName, provider.name)))
TransactionModel -->PaymentController :
deactivate TransactionModel
destroysilent TransactionModel
loop i from 0 to ArrayList<Discounts> discounts size
alt discount.type == DiscountType.OVERALL
PaymentController ->DiscountController : useDiscount(email, discount.id)
activate DiscountController
DiscountController ->UsedDiscountModel:insert(new UsedDiscount(email, discountId))
activate UsedDiscountModel
UsedDiscountModel-->DiscountController: True
destroysilent DiscountController
deactivate UsedDiscountModel
destroysilent UsedDiscountModel
deactivate DiscountController
end
end 
deactivate PaymentController
Spring Dispatcher Servlet --> user:200 OK
destroysilent PaymentController
end
else returns False
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet: throws new  ResponseStatusException(HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
destroysilent AuthInterceptor
Spring Dispatcher Servlet -->user: 401 UNAUTHORIZED

end
===========================================================================
title List Discounts
actor user
boundary Spring Dispatcher Servlet
control AuthInterceptor




control DiscountController
entity "Model<Discount>" as discountModel
entity "Model<UsedDiscount>" as usedDiscountModel
activate Spring Dispatcher Servlet

user ->Spring Dispatcher Servlet : GET /discounts
activate AuthInterceptor
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor
Spring Dispatcher Servlet -> DiscountController : listDiscounts(Context ctx, String serviceName)
activate DiscountController

alt serviceName == null
DiscountController ->discountModel: discountModel.select(d -> d.isActive)
activate discountModel
discountModel -->DiscountController: ArrayList<Discount> 
DiscountController ->DiscountController : getEffectiveDiscountsForUser(String ctx.email,ArrayList<Discount>)
deactivate discountModel
DiscountController ->usedDiscountModel : select(d -> d.email.equals(email))
activate usedDiscountModel
usedDiscountModel -->DiscountController : ArrayList<UsedDiscount>
deactivate usedDiscountModel
DiscountController -->Spring Dispatcher Servlet : ArrayList<Discount>
deactivate DiscountController
Spring Dispatcher Servlet -->user: 200 OK
else serviceName != null
activate DiscountController
DiscountController ->DiscountController : getDiscountsForServiceForUser(ctx.email, serviceName)
DiscountController ->discountModel : select(d -> d.isActive && (d.type == DiscountType.OVERALL || (d.type == DiscountType.SPECIFIC && d.serviceName.equals(serviceName))))
activate discountModel
discountModel -->DiscountController : ArrayList<Discount>
deactivate discountModel
DiscountController ->DiscountController : getEffectiveDiscountsForUser(email, discounts);
DiscountController ->usedDiscountModel : select(d -> d.email.equals(email))
activate usedDiscountModel
usedDiscountModel -->DiscountController : ArrayList<UsedDiscount>
deactivate usedDiscountModel
DiscountController -->Spring Dispatcher Servlet : ArrayList<Discount>
deactivate DiscountController
Spring Dispatcher Servlet -->user: 200 OK
end
else returns False
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet:throws new ResponseStatusException(HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
Spring Dispatcher Servlet --> user:401 UNAUTHORIZED

end
=======================================================
title LogIn

actor user
boundary Spring Dispatcher Servlet
control AuthController
entity "Model<User>" as UserModel
participant Token

activate Spring Dispatcher Servlet
user->Spring Dispatcher Servlet:POST /login
Spring Dispatcher Servlet ->AuthController : logIn(LogInBody body)
activate AuthController
AuthController ->UserModel : selectOne(u -> u.email.equals(body.email) && u.password.equals(body.password))
activate UserModel
UserModel -->AuthController : user
deactivate UserModel
alt user != null
AuthController ->* Token:<<create>>
activate Token
Token -->AuthController :
AuthController -->Spring Dispatcher Servlet : Token
deactivate Token
Spring Dispatcher Servlet -->user : 200 OK
deactivate AuthController
end
activate AuthController
AuthController -->Spring Dispatcher Servlet:throw new ResponseStatusException(HttpStatus.BAD_REQUEST)
deactivate AuthController
Spring Dispatcher Servlet -->user : 400 BAD_REQUEST
======================================================================
title Admin List Refunds
actor admin
boundary Spring Dispatcher Servlet
control AuthInterceptor
control AdminInterceptor
control AdminRefundController
entity "Model<Refund>" as refundModel
entity "Model<Transaction>" as TransactionModel
activate Spring Dispatcher Servlet

admin -> Spring Dispatcher Servlet : GET /admin/refunds
Spring Dispatcher Servlet ->AuthInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AuthInterceptor
alt returns True
AuthInterceptor -->Spring Dispatcher Servlet: True
deactivate AuthInterceptor

Spring Dispatcher Servlet ->AdminInterceptor : preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
activate AdminInterceptor
alt returns True

AdminInterceptor -->Spring Dispatcher Servlet : True

deactivate AdminInterceptor
activate AdminRefundController
Spring Dispatcher Servlet ->AdminRefundController : listRefundRequests()
activate refundModel
AdminRefundController ->refundModel : select(r -> true)
refundModel -->AdminRefundController : ArrayList <RefundRequest>
destroysilent refundModel
deactivate refundModel
AdminRefundController -->* RefundRequestResponse: <<creates Array List>>
loop for i = 0  to refund request array list size
AdminRefundController ->TransactionModel:transactionModel.selectOne(t -> t.id == rr.transactionId)
activate TransactionModel
TransactionModel -->AdminRefundController: return Transaction
deactivate TransactionModel
destroysilent TransactionModel
AdminRefundController -> RefundRequestResponse : add(new RefundRequestResponse(rr, Transaction obj)))
activate RefundRequestResponse
end
RefundRequestResponse -->AdminRefundController : ArrayList<RefundRequestResponse>
deactivate RefundRequestResponse
AdminRefundController -->Spring Dispatcher Servlet : ArrayList<RefundRequestResponse>
deactivate AdminRefundController
destroysilent AdminRefundController
Spring Dispatcher Servlet -->admin :200 OK
destroysilent RefundRequestResponse
else returns false
activate AdminInterceptor
AdminInterceptor -->Spring Dispatcher Servlet :throws new ResponseStatusException(HttpStatus.FORBIDDEN)
deactivate AdminInterceptor
destroysilent AdminInterceptor
Spring Dispatcher Servlet -->admin: 403 FORBIDDEN
end

else returns false
activate AuthInterceptor
AuthInterceptor -->Spring Dispatcher Servlet :throws new ResponseStatusException(HttpStatus.UNAUTHORIZED)
deactivate AuthInterceptor
destroysilent AuthInterceptor
Spring Dispatcher Servlet -->admin : 401 UNAUTHORIZED
end
