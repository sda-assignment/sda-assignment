pseudo code for controller classes :

1) Authientication controller

private Relation <User> relation

public  authController (Relation <User> relation)
{
    this.relation = relation;
}

public boolean SignUp(String email, String userName, String password)
{
    for (all elements in relation)
    {
        if (email exists)
        {
            return false;
            // can throw an exception instead
        }
    }
    if (userName != /*some criteria*/)
    {
        return false;
        // can throw an exception instead
    }
    if (password !- /*some criteria*/)
    {
        return false;
        // can throw an exception instead
    }

    User newUser = new User(email, username, password, false, 0);

    // Set current session info to username, email, password, isStaff

}

public boolean LogIn (string Email, string password)
{
    for (all emails in relation)
    {
        if (email exists)
        {
            if(password parameter == password of found element)
            {
                // set current login session details with the user details
                // print successful sign in
                return true;
            }
            else
            {
                // print password incorrect
                return false;
                // or throw exception
            }

        }
        else
        {
            // print user does not exist
            // or throw an exception
            return false;
        }
    }
}

2) User Discount Controller

private Relation <Discount> relation;

public UserDiscountController (Relation <Discount> relation)
{
    this.relation = relation;
}

public void print ()
{
    for (all discount records in discount relation)
    {
        print all attributes;
    }
}

3) Admin Discount Controller

private  Relation <Discount> relation

public AdminDiscountController (Relation <Discount> relation)
{
    this.relation = relation;
}
public boolean AddDiscount (Discount Obj)
{

    relation.insert(Obj);
}

4) Service Controller

private Relation <Provider> relation

public ServiceController (Relation <Provider> relation)
{
    this.relation = relation;
}
public boolean AddServiceProvider (string serviceName, string providerName)
{
    // Uses Service Name and provider name to check on an enumerated list
    // of service providers
    if (providerName && serviceName exist)
    {
        Provider = new Provider (/*set it with provider attributes from enumrated list*/)
        relation.insert(Provider)
        return true
    }
    else
    {
        // print service provider not supported
        return false;
        // throw exception instead if needed
    }
}

5) Refund Controller

private Relation <RefundRequests> relation
private Relation <User> relation2

public RefundController (Relation <RefundRequests> relation, Relation <User> relation2)
{
    this.relation = relation;
    this.relation2 = relation2;
}

public void ViewRefundRequests ()
{
    for (each record in refund requests)
    {
        print all attributes;
    }
}

public boolean EvaluateRefund ()
{
    // for a certain transaction :
    // if accepted -> addes to the user's wallet the amount in the transaction
    // and is supposed to deduct the amount from the service (might add balance to service)
    // returns true only in case of successful accepted refund
    // else returns false if it fails to accept the refund or refund is rejected
    // prints exception in failure and prints rejected if refund is rejected
}

6) Admin transaction controller

private Relation <Transaction> relation

public AdminTransactionController (Relation <Transaction> relation)
{
    this.relation = relation;
}
public void PrintTransactionHistory (string type)
{
    if (type = all)
    {
        // print all transactions in the history
    }
    else if (type = payment)
    {
        // print all transactions that has type field = payment
        use relation.select
    }
    else if (type = add to wallet)
    {
        // print all transactions that has type field = wallet
        use relation.select

    }
    else if (type = Refund)
    {
        // print all transactions that has type field = refund
    }
    else
    {
        // print invalid type, throw exception if needed
    }
}

7) User Controller

private Relation <User> relation

public UserDiscountController (Relation <User> relation)
{
    this.relation = relation;
}

public boolean AddAdmin(string Email)
{
    // sets the is staff variable to 1 for the user that is filtered from relation.select(email)
    // giving him admin privliges, returns 1 if successful, false if unsuccessful or not found
    // can throw exception if needed
}

8) User Transaction controller

private Relation <Transaction> relation1
private <User> relation2
private <RefundRequests> relation3
private <Services> relation4


+ UserTransactionController (Relation <Transaction> relation, Relation <User> relation2, Relation <RefundRequests> relation3,Relation <Services> relation4)
{

    this.relation1 = relation1
    this.relation2 = relation2
    this.relation3 = relation3
    this.relation4 = relation4
}

public boolean RechargeService (int amount,string serviceName)
{
    // gets email info from current user login session info class
    // create transaction object
    Transaction obj = new Transaction(email, LocalDateTime timestamp, amount, TransactionType type)
    relation1.insert -> obj to relation
    //Update file
    if successful return true else false or excepetion
}
public void RefundRequest (double amount,string ServiceName)
{
    // gets email info from current user login session info class
    RefundRequests obj = new RefundRequests (int id, double amount,serviceName, RefundRequestStatus status)
    relation3.insert-> obj
    // Update file

}
public ChargeWallet (int amount,string creditCard)
{
    // gets email info from current user login session info class
    if (creditcard number valid)
    {
        User user = relation2.select(email of current user);
        user.wallet += amount;
        // Update file
        return true
    }
    else
    {
        invalid credit card details
        print error
        return false
        throw an exception
    }

}
public Arraylist<Services> searchService(string serviceName)
{
    Arraylist<Services> = relation4.select(serviceName)
    return Arraylist<Services>;
    // can be empty
}
public void PrintTransactionHistory ()
{
    // can select them by using relation1.select (email == email)
    // and printing the returned list
    for (each element in relation1 that has email == to current user email)
    {
        print result to screen
    }
}
